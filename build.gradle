import java.time.Instant
import java.time.LocalDate

plugins {
    id("java")
    id("org.springframework.boot") version "2.3.5.RELEASE"
    id("io.spring.dependency-management") version "1.0.10.RELEASE"
    id("org.unbroken-dome.xjc") version "2.0.0"
}

repositories {
    mavenCentral()
}

project.sourceCompatibility = JavaVersion.VERSION_11
project.targetCompatibility = JavaVersion.VERSION_11

group = 'uk.gov.justice.probation'

def today = Instant.now()
def todaysDate = LocalDate.now().format('yyyy-MM-dd')
version = System.getenv('CI') ? "${todaysDate}.${System.getenv('CIRCLE_BUILD_NUM')}" : todaysDate

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    manifest {
        attributes (
                'Implementation-Title': rootProject.name, 'Implementation-Version': archiveVersion
        )
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = version
            group = group
            name = rootProject.name
            time = today
            additional = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName
            ]
        }
    }
}

test {
    useJUnitPlatform ()
    filter {
        excludeTestsMatching '*SmokeTest'
        excludeTestsMatching '*WIP*'
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime:2.3.1")

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.ws:spring-ws-security")
    implementation("org.apache.ws.security:wss4j:1.6.19")

    implementation("wsdl4j:wsdl4j:1.6.2")
    implementation("javax.xml.bind:jaxb-api:2.3.1")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation(platform("org.junit:junit-bom:5.7.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")

}

xjc {
    srcDirName.set("resources/xsd")
    extension.set(true)
}

sourceSets.named("main") {
    xjcBinding.srcDir("resources/xsd")
}
